// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, full_name, password) VALUES ($1, $2, $3) RETURNING id, email, full_name, password, created_at, role
`

type CreateUserParams struct {
	Email    string `json:"email"`
	FullName string `json:"full_name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.FullName, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :one
delete from users where email = $1 returning id, email, full_name, password, created_at, role
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
delete from users where id = $1 returning id, email, full_name, password, created_at, role
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const getListUsers = `-- name: GetListUsers :many
select id, email, full_name, password, created_at, role from users order by id
`

func (q *Queries) GetListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.Password,
			&i.CreatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, full_name, password, created_at, role from users where email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, email, full_name, password, created_at, role from users where id = $1 limit 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const selectUserForUpdate = `-- name: SelectUserForUpdate :one
select id, email, full_name, password, created_at, role from users where id = $1 for no key update
`

func (q *Queries) SelectUserForUpdate(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, selectUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users set full_name = $2, password = $3 where id = $1 returning id, email, full_name, password, created_at, role
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	FullName string `json:"full_name"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.FullName, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}
