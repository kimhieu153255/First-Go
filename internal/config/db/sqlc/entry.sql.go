// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry.sql

package db

import (
	"context"
)

const addEntry = `-- name: AddEntry :one
INSERT INTO entries (account_id, amount, currency)
VALUES ($1, $2, $3) RETURNING id, account_id, amount, currency, created_at
`

type AddEntryParams struct {
	AccountID int64  `json:"account_id"`
	Amount    int64  `json:"amount"`
	Currency  string `json:"currency"`
}

func (q *Queries) AddEntry(ctx context.Context, arg AddEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, addEntry, arg.AccountID, arg.Amount, arg.Currency)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntryByID = `-- name: DeleteEntryByID :one
delete from entries where id = $1 returning id, account_id, amount, currency, created_at
`

func (q *Queries) DeleteEntryByID(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, deleteEntryByID, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getEntries = `-- name: GetEntries :many
select id, account_id, amount, currency, created_at from entries order by id
`

func (q *Queries) GetEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.Query(ctx, getEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntriesByAccountID = `-- name: GetEntriesByAccountID :many
select id, account_id, amount, currency, created_at from entries where account_id = $1 order by id
`

func (q *Queries) GetEntriesByAccountID(ctx context.Context, accountID int64) ([]Entry, error) {
	rows, err := q.db.Query(ctx, getEntriesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByID = `-- name: GetEntryByID :one
select id, account_id, amount, currency, created_at from entries where id = $1 limit 1
`

func (q *Queries) GetEntryByID(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntryByID, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
