// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfer.sql

package db

import (
	"context"
)

const addTransfer = `-- name: AddTransfer :one
INSERT INTO transfers (from_account_id, to_account_id, amount, currency)
VALUES ($1, $2, $3, $4) RETURNING id, from_account_id, to_account_id, amount, currency, created_at
`

type AddTransferParams struct {
	FromAccountID int64  `json:"from_account_id"`
	ToAccountID   int64  `json:"to_account_id"`
	Amount        int64  `json:"amount"`
	Currency      string `json:"currency"`
}

func (q *Queries) AddTransfer(ctx context.Context, arg AddTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, addTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Currency,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransferByID = `-- name: DeleteTransferByID :one
delete from transfers where id = $1 returning id, from_account_id, to_account_id, amount, currency, created_at
`

func (q *Queries) DeleteTransferByID(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, deleteTransferByID, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getTransferByID = `-- name: GetTransferByID :one
select id, from_account_id, to_account_id, amount, currency, created_at from transfers where id = $1 limit 1
`

func (q *Queries) GetTransferByID(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransferByID, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfers = `-- name: GetTransfers :many
select id, from_account_id, to_account_id, amount, currency, created_at from transfers order by id
`

func (q *Queries) GetTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, getTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByAccountID = `-- name: GetTransfersByAccountID :many
select id, from_account_id, to_account_id, amount, currency, created_at from transfers
where from_account_id = $1 or to_account_id = $1
order by id
`

func (q *Queries) GetTransfersByAccountID(ctx context.Context, fromAccountID int64) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, getTransfersByAccountID, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
