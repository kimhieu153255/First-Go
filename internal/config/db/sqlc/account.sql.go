// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
)

const addAccountBalanceByID = `-- name: AddAccountBalanceByID :one
update accounts set balance = balance + $1 where id = $2 returning id, user_id, balance, currency, created_at
`

type AddAccountBalanceByIDParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddAccountBalanceByID(ctx context.Context, arg AddAccountBalanceByIDParams) (Account, error) {
	row := q.db.QueryRow(ctx, addAccountBalanceByID, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, balance, currency) VALUES ($1, $2, $3) RETURNING id, user_id, balance, currency, created_at
`

type CreateAccountParams struct {
	UserID   int64  `json:"user_id"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccountByID = `-- name: DeleteAccountByID :one
delete from accounts where id = $1 returning id, user_id, balance, currency, created_at
`

func (q *Queries) DeleteAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, deleteAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
select id, user_id, balance, currency, created_at from accounts where id = $1 limit 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByUserID = `-- name: GetAccountByUserID :one
select id, user_id, balance, currency, created_at from accounts where user_id = $1 limit 1
`

func (q *Queries) GetAccountByUserID(ctx context.Context, userID int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByUserID, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getListAccounts = `-- name: GetListAccounts :many
select id, user_id, balance, currency, created_at from accounts order by id
`

func (q *Queries) GetListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getListAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAccountForUpdate = `-- name: SelectAccountForUpdate :one
select id, user_id, balance, currency, created_at from accounts where id = $1 for no key update
`

func (q *Queries) SelectAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, selectAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountBalanceByID = `-- name: UpdateAccountBalanceByID :one
update accounts set balance = $2 where id = $1 returning id, user_id, balance, currency, created_at
`

type UpdateAccountBalanceByIDParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAccountBalanceByID(ctx context.Context, arg UpdateAccountBalanceByIDParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountBalanceByID, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
